from xml.etree.ElementTree import ElementTree
from dalvik import insn_from_xml

import pydot

def insns_from_xml(method_el):
    bytecodes_el = method_el.find('code').find('bytecodes')
    if bytecodes_el is None:
        return []
    insn_els = bytecodes_el.findall('insn')
    insns = []
    for insn_el in insn_els:
        opcode = insn_el.get('opCode')
        insn = insn_from_xml(insn_el)
        insns.append(insn)
    return insns

def taken_indices(insns):
    indices = set()
    for insn in insns:
        if insn.is_branch():
            indices.add(insn.target_index())
    return indices

def untaken_indices(insns):
    indices = set()
    for i, insn in enumerate(insns):
        if insns[i-1].is_branch():
            indices.add(insn.index())
    return indices

def leaders(insns):
    leaders = set()
    leaders.add(insns[0].index())
    leaders |= untaken_indices(insns)
    leaders |= taken_indices(insns)
    return leaders

def basic_blocks(insns):
    ldrs = leaders(insns)
    bbs = []
    bb = []
    for insn in insns:
        if insn.index() in ldrs and bb:
            bbs.append(tuple(bb))
            bb = []
        bb.append(insn)
    if bb: bbs.append(tuple(bb))
    return bbs

def graph_from_xml(method_el):
    insns = insns_from_xml(method_el)
    bbs = basic_blocks(insns)
    graph = {}
    jump_points = {}
    for bb in bbs:
        graph[bb] = []
        jump_points[bb[0].index()] = bb
    for i, bb in enumerate(bbs):
        tail = bb[-1]
        if not tail.is_branch() or tail.is_conditional():
            if (i+1) in range(len(bbs)):
                graph[bb].append(bbs[i+1])
        if tail.is_branch() and not tail.is_return():
            dest = jump_points[tail.target_index()]
            graph[bb].append(dest)
    return graph

def label(node):
    return '%d [%s]' % (node[0].index(), node[-1].opcode())

def visualize(graph):
    dot_graph = pydot.Dot(graph_type='digraph')
    for src in graph:
        for dest in graph[src]:
            edge = pydot.Edge(label(src), label(dest))
            dot_graph.add_edge(edge)
    dot_graph.write_png('example.png')

tree = ElementTree()
tree.parse('method.xml')
graph = graph_from_xml(tree.getroot())
visualize(graph)
