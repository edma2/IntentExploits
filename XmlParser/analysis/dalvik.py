import re

class Insn(object):
    def __init__(self, xml):
        self.xml = xml

    def __repr__(self):
        return str(self.index()) + ':' + self.opcode()

    def opcode(self):
        return self.xml.get('opCode')

    def index(self):
        return int(self.xml.get('index'), 16)

    def transfer(self, state):
        pass

    def is_branch(self):
        return False

    def is_conditional(self):
        return False

    def is_return(self):
        return False

    def is_sink(self):
        return False

    def is_source(self):
        return False

    def target_index(self):
        return None

class Branch(Insn):
    def is_branch(self):
        return True

class Return(Branch):
    def is_return(self):
        return True

class If(Branch):
    def target_index(self):
        return int(self.xml.get('vC'), 16)

    def is_conditional(self):
        return True

class IfZero(If):
    def target_index(self):
        return int(self.xml.get('vB'), 16)

class Goto(Branch):
    def target_index(self):
        return int(self.xml.get('vA'), 16)

class Move(Insn):
    def dest(self):
        return self.xml.get('vA')

    def src(self):
        return self.xml.get('vB')

    def transfer(self, state):
        state[self.dest()] = state[self.src()]

class MoveResultObject(Move):
    def transfer(self, state):
        state[self.dest()] = 1337 # FIXME

class Const(Move):
    def transfer(self, state):
        state[self.dest()] = int(self.src(), 16)

class ConstString(Move):
    def transfer(self, state):
        state[self.dest()] = self.src()

def get_class_and_method(signature):
    pattern = '(?P<class>\w+(/\w+)*)\.(?P<method>[^\(]+)\(.*\)'
    res = re.search(pattern, signature)
    return res.group('class'), res.group('method')

class Invoke(Insn):
    def __init__(self, xml):
        self.xml = xml

    def get_class_name(self):
        return get_class_and_method(self.xml.get('vC'))[0]

    def get_method_name(self):
        return get_class_and_method(self.xml.get('vC'))[1]

    def is_source(self):
        class_name = self.get_class_name()
        method_name = self.get_method_name()
        INTENT_CLASS = 'Landroid/content/Intent;'
        return class_name == INTENT_CLASS and method_name == '<init>'

    def is_sink(self):
        return self.methodname in [
                'sendBroadcast', 'sendOrderedBroadcast',
                'sendStickyBroadcast', 'startActivity', 'startService',
                'bindService']

classes = {
    'if-eq': If,
    'if-ne': If,
    'if-lt': If,
    'if-ge': If,
    'if-gt': If,
    'if-le': If,
    'if-eqz': IfZero,
    'if-nez': IfZero,
    'if-ltz': IfZero,
    'if-gez': IfZero,
    'if-gtz': IfZero,
    'if-lez': IfZero,
    'goto': Goto,
    'goto/16': Goto,
    'invoke-virtual': Invoke,
    'invoke-super': Invoke,
    'invoke-direct': Invoke,
    'invoke-static': Invoke,
    'invoke-interface': Invoke,
    'const/4': Const,
    'const/16': Const,
    'const': Const,
    'const-string': ConstString,
    'const-class': ConstString,
    'const-string/jumbo': ConstString,
    'const-class/jumbo': ConstString,
    'const/high16': Const,
    'const-wide/16': Const,
    'const-wide/32': Const,
    'const-wide': Const,
    'const-wide/high16': Const,
    'return': Return,
    'return-void': Return,
    'return-wide': Return,
    'return-object': Return,
    'move-result-object': MoveResultObject,
    'move': Move
}

def insn_from_xml(insn_el):
    opcode = insn_el.get('opCode')
    insn = classes.setdefault(opcode, Insn)(insn_el)
    return insn
