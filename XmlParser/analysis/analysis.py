from xml.etree.ElementTree import ElementTree
import pydot
import re
import copy
from networkx import nx

# Global Counter to Allow for Distinct Copies of Basic Blocks
global_counter = 0

class BasicBlock(object):
    def __init__(self, method_name, BB=None):
        global global_counter

        self.method_name = method_name

        if BB:
            self.instructions = BB.instructions
        else:
            self.instructions = tuple()

        global_counter += 1
        self.id = global_counter

    def __hash__(self):
        return hash(hash(self.instructions) + hash(self.id))

    def __str__(self):
        return str(self.method_name) + str(self.id)

    def __repr__(self):
        return repr(self.method_name) + repr(self.id)

    def add_instruction(self, insn):
        self.instructions += (insn,)

    def entry_point_index(self):
        #Get the index of the 1st instruction of the BasicBlock
        return self.instructions[0].index()

    def tail_instruction(self):
        return self.instructions[-1]

    def __deepcopy__(self, memo):
        return BasicBlock(self.method_name, BB=self)

class Insn(object):
    def __init__(self, xml):
        self.xml = xml

    def __repr__(self):
        return str(self.index()) + ':' + self.opcode()

    def opcode(self):
        return self.xml.get('opCode')

    def index(self):
        return int(self.xml.get('index'), 16)

    def transfer(self, state):
        pass

    def target_index(self):
        return None

    def is_source(self):
        return False

    def is_sink(self):
        return False
        
    def follows_sequential_instruction(self):
        return True

    def ends_block(self):
        return False

    def has_target(self):
        return self.target_index() != None

    def is_invoke(self):
        return False

    def is_return(self):
        return False

class Branch(Insn):
    def ends_block(self):
        return True

class Return(Branch):
    def is_return(self):
        return True

    def follows_sequential_instruction(self):
        return False

class If(Branch):
    def target_index(self):
        return int(self.xml.get('vC'), 16)

class IfZero(If):
    def target_index(self):
        return int(self.xml.get('vB'), 16)

class Goto(Branch):
    def target_index(self):
        return int(self.xml.get('vA'), 16)

    def follows_sequential_instruction(self):
        return False

class Move(Insn):
    def dest(self):
        return self.xml.get('vA')

    def src(self):
        return self.xml.get('vB')

    def transfer(self, state):
        state[self.dest()] = state[self.src()]

class MoveResultObject(Move):
    def transfer(self, state):
        state[self.dest()] = 1337 # FIXME

class Const(Move):
    def transfer(self, state):
        state[self.dest()] = int(self.src(), 16)

class ConstString(Move):
    def transfer(self, state):
        state[self.dest()] = self.src()

def get_class_and_method(signature):
    pattern = r'(?P<class>\w+(/\w+)*;)\.(?P<method>[^\(]+)\(.*\)'
    res = re.search(pattern, signature)
    return res.group('class'), res.group('method')

class Invoke(Branch):
    def __init__(self, xml):
        self.xml = xml

    def get_class_name(self):
        return get_class_and_method(self.xml.get('vC'))[0]

    def get_method_name(self):
        return get_class_and_method(self.xml.get('vC'))[1]

    def is_source(self):
        class_name = self.get_class_name()
        method_name = self.get_method_name()
        INTENT_CLASS = 'Landroid/content/Intent;'
        return class_name == INTENT_CLASS and method_name == '<init>'

    def is_sink(self):
        return self.get_method_name() in ['sendBroadcast',
                'sendOrderedBroadcast', 'sendStickyBroadcast', 'startActivity',
                'startService', 'bindService']

    def signature(self):
        signature = self.xml.get('vC')
        rex = re.match(r'(.*)\.(.*)\(((.*))\)', signature)
        class_name = rex.group(1)
        method_name = rex.group(2)
        params = rex.group(3)
        return "%s.%s(%s)" % (class_name, method_name, params)

    def is_invoke(self):
        return True

classes = {
    'if-eq': If,
    'if-ne': If,
    'if-lt': If,
    'if-ge': If,
    'if-gt': If,
    'if-le': If,
    'if-eqz': IfZero,
    'if-nez': IfZero,
    'if-ltz': IfZero,
    'if-gez': IfZero,
    'if-gtz': IfZero,
    'if-lez': IfZero,
    'goto': Goto,
    'goto/16': Goto,
    'invoke-virtual': Invoke,
    'invoke-super': Invoke,
    'invoke-direct': Invoke,
    'invoke-static': Invoke,
    'invoke-interface': Invoke,
    'const/4': Const,
    'const/16': Const,
    'const': Const,
    'const-string': ConstString,
    'const-class': ConstString,
    'const-string/jumbo': ConstString,
    'const-class/jumbo': ConstString,
    'const/high16': Const,
    'const-wide/16': Const,
    'const-wide/32': Const,
    'const-wide': Const,
    'const-wide/high16': Const,
    'return': Return,
    'return-void': Return,
    'return-wide': Return,
    'return-object': Return,
    'move-result-object': MoveResultObject,
    'move': Move
}

def insn_from_xml(insn_el):
    opcode = insn_el.get('opCode')
    insn = classes.setdefault(opcode, Insn)(insn_el)
    return insn

def insns_from_xml(method_el):
    bytecodes_el = method_el.find('code').find('bytecodes')
    if bytecodes_el is None:
        return []
    insn_els = bytecodes_el.findall('insn')
    insns = []
    for insn_el in insn_els:
        opcode = insn_el.get('opCode')
        insn = insn_from_xml(insn_el)
        insns.append(insn)
    return insns

def leaders(insns):
    indices = set([insns[0].index()])
    for i, insn in enumerate(insns):
        if insn.ends_block():
            indices.add(insn.target_index())
            if (i+1) in range(len(insns)):
                indices.add(insns[i+1].index())
    return indices

def basic_blocks(insns, method_name):
    ldrs = leaders(insns)
    bbs = []
    bb = BasicBlock(method_name)
    for insn in insns:
        if insn.index() in ldrs and bb.instructions:
            bbs.append(bb)
            bb = BasicBlock(method_name)
        bb.add_instruction(insn)
    if bb: bbs.append(bb)
    return bbs

def graph_from_xml(method_el, method_name):
    insns = insns_from_xml(method_el)
    bbs = basic_blocks(insns, method_name)
    graph = nx.DiGraph()
    bb_entry_points = {}
    for bb in bbs:
        bb_entry_points[bb.entry_point_index()] = bb
    for i, bb in enumerate(bbs):
        tail = bb.tail_instruction()
        if tail.follows_sequential_instruction():
            if (i+1) in range(len(bbs)):
                graph.add_edge(bb, bbs[i+1])
        if tail.has_target():
            dest = bb_entry_points[tail.target_index()]
            graph.add_edge(bb, dest)
    return graph

def label(node):
    return '%d [%s]' % (node[0].index(), node[-1].opcode())

def visualize(graph):
    dot_graph = nx.to_pydot(graph)
    dot_graph.write_png('example.png')

def method_signature_from_xml(class_el, method_el):
    class_name = class_el.get('name')
    method_name = method_el.get('name')
    parameters = []
    parameter_els = method_el.findall('parameter')
    for param_el in parameter_els:
        parameters.append(param_el.get('type'))
    return "%s.%s(%s)" % (class_name, method_name, "".join(parameters))

def copy_graph(G):
    new_graph = nx.DiGraph()
    node_mapping = {}

    for node in G.nodes():
        new_node = copy.deepcopy(node)
        node_mapping[node] = new_node
        new_graph.add_node(new_node)

    new_edges = []

    for (n1, n2) in G.edges():
        new_edges.append((node_mapping[n1], node_mapping[n2]))

    new_graph.add_edges_from(new_edges)

    return new_graph

graphs = {}
activity_entry_points = []
tree = ElementTree()
tree.parse('dump.xml')
for class_el in tree.findall('class'):
    for method_el in class_el.findall('method'):
        code_el = method_el.find('code')
        if code_el is None or code_el.find('bytecodes') is None:
            continue
        graph = graph_from_xml(method_el, method_el.get('name'))
        graphs[method_signature_from_xml(class_el, method_el)] = graph

        # Find All Activity Entry Points
        if method_el.get('name') == "onCreate":
            print "Entry Point:", class_el.get('name')
            activity_entry_points.append((class_el.get('name'), graph))

def expand_method(method):
    for caller_bb in method.nodes():
        insn = caller_bb.tail_instruction()
        if insn.is_invoke():
            # If the caller_bb is invoke, the return block is the one it is linked to
            return_bb = method.successors(caller_bb)[0]
            # Destroy the Edge between the caller_bb and the return_bb
            method.remove_edge(caller_bb, return_bb)

            if insn.signature() not in graphs:
                pass
                # Means it's calling a super class
                # Or Landroid, Ljava, etc...
            else:
                # Create a copy of the graph of the function we are calling
                method_graph = copy_graph(graphs[insn.signature()])
                method = nx.union(method, method_graph)

                #Link caller to entry point of method graph
                for callee_bb in method_graph.nodes():
                    if method_graph.in_degree(callee_bb) == 0:
                        method.add_edge(caller_bb, callee_bb)
                        break

                #Link return blocks to the return_bb in the caller
                for callee_bb in method_graph.nodes():
                    # If a basic block ends with a return, link it back to the
                    # return_bb in the caller graph
                    if callee_bb.tail_instruction().is_return():
                        method.add_edge(callee_bb, return_bb)
    return method

for class_name, onCreate_method in activity_entry_points:
    #Temporary - To See what a combination will look like
    print "Visualizing:", class_name
    visualize(expand_method(onCreate_method))
    exit()
