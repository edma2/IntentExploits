from xml.etree.ElementTree import ElementTree
import pydot
import re

class Insn(object):
    def __init__(self, xml):
        self.xml = xml

    def __repr__(self):
        return str(self.index()) + ':' + self.opcode()

    def opcode(self):
        return self.xml.get('opCode')

    def index(self):
        return int(self.xml.get('index'), 16)

    def transfer(self, state):
        pass

    def is_branch(self):
        return False

    def target_index(self):
        return None

class Branch(Insn):
    def is_branch(self):
        return True

    def is_conditional(self):
        return False

    def is_return(self):
        return False

class Return(Branch):
    def is_return(self):
        return True

class If(Branch):
    def target_index(self):
        return int(self.xml.get('vC'), 16)

    def is_conditional(self):
        return True

class IfZero(If):
    def target_index(self):
        return int(self.xml.get('vB'), 16)

class Goto(Branch):
    def target_index(self):
        return int(self.xml.get('vA'), 16)

class Move(Insn):
    def dest(self):
        return self.xml.get('vA')

    def src(self):
        return self.xml.get('vB')

    def transfer(self, state):
        state[self.dest()] = state[self.src()]

class MoveResultObject(Move):
    def transfer(self, state):
        state[self.dest()] = 1337 # FIXME

class Const(Move):
    def transfer(self, state):
        state[self.dest()] = int(self.src(), 16)

class ConstString(Move):
    def transfer(self, state):
        state[self.dest()] = self.src()

def get_class_and_method(signature):
    pattern = '(?P<class>\w+(/\w+)*)\.(?P<method>[^\(]+)\(.*\)'
    res = re.search(pattern, signature)
    return res.group('class'), res.group('method')

class Invoke(Insn):
    def __init__(self, xml):
        self.xml = xml

    def get_class_name(self):
        return get_class_and_method(self.xml.get('vC'))[0]

    def get_method_name(self):
        return get_class_and_method(self.xml.get('vC'))[1]

    def is_source(self):
        class_name = self.get_class_name()
        method_name = self.get_method_name()
        INTENT_CLASS = 'Landroid/content/Intent;'
        return class_name == INTENT_CLASS and method_name == '<init>'

    def is_sink(self):
        return self.methodname in [
                'sendBroadcast', 'sendOrderedBroadcast',
                'sendStickyBroadcast', 'startActivity', 'startService',
                'bindService']

classes = {
    'if-eq': If,
    'if-ne': If,
    'if-lt': If,
    'if-ge': If,
    'if-gt': If,
    'if-le': If,
    'if-eqz': IfZero,
    'if-nez': IfZero,
    'if-ltz': IfZero,
    'if-gez': IfZero,
    'if-gtz': IfZero,
    'if-lez': IfZero,
    'goto': Goto,
    'goto/16': Goto,
    'invoke-virtual': Invoke,
    'invoke-super': Invoke,
    'invoke-direct': Invoke,
    'invoke-static': Invoke,
    'invoke-interface': Invoke,
    'const/4': Const,
    'const/16': Const,
    'const': Const,
    'const-string': ConstString,
    'const-class': ConstString,
    'const-string/jumbo': ConstString,
    'const-class/jumbo': ConstString,
    'const/high16': Const,
    'const-wide/16': Const,
    'const-wide/32': Const,
    'const-wide': Const,
    'const-wide/high16': Const,
    'return': Return,
    'return-void': Return,
    'return-wide': Return,
    'return-object': Return,
    'move-result-object': MoveResultObject,
    'move': Move
}

def insn_from_xml(insn_el):
    opcode = insn_el.get('opCode')
    insn = classes.setdefault(opcode, Insn)(insn_el)
    return insn

def insns_from_xml(method_el):
    bytecodes_el = method_el.find('code').find('bytecodes')
    if bytecodes_el is None:
        return []
    insn_els = bytecodes_el.findall('insn')
    insns = []
    for insn_el in insn_els:
        opcode = insn_el.get('opCode')
        insn = insn_from_xml(insn_el)
        insns.append(insn)
    return insns

def leaders(insns):
    indices = set([insns[0].index()])
    for i, insn in enumerate(insns):
        if insn.is_branch():
            indices.add(insn.target_index())
            if (i+1) in range(len(insns)):
                indices.add(insns[i+1].index())
    return indices

def basic_blocks(insns):
    ldrs = leaders(insns)
    bbs = []
    bb = []
    for insn in insns:
        if insn.index() in ldrs and bb:
            bbs.append(tuple(bb))
            bb = []
        bb.append(insn)
    if bb: bbs.append(tuple(bb))
    return bbs

def graph_from_xml(method_el):
    insns = insns_from_xml(method_el)
    bbs = basic_blocks(insns)
    graph = {}
    bb_entry_points = {}
    for bb in bbs:
        graph[bb] = []
        bb_entry_points[bb[0].index()] = bb
    for i, bb in enumerate(bbs):
        tail = bb[-1]
        if not tail.is_branch() or tail.is_conditional():
            if (i+1) in range(len(bbs)):
                graph[bb].append(bbs[i+1])
        if tail.is_branch() and not tail.is_return():
            dest = bb_entry_points[tail.target_index()]
            graph[bb].append(dest)
    return graph

def label(node):
    return '%d [%s]' % (node[0].index(), node[-1].opcode())

def visualize(graph):
    dot_graph = pydot.Dot(graph_type='digraph')
    for src in graph:
        for dest in graph[src]:
            edge = pydot.Edge(label(src), label(dest))
            dot_graph.add_edge(edge)
    dot_graph.write_png('example.png')

tree = ElementTree()
tree.parse('method.xml')
graph = graph_from_xml(tree.getroot())
visualize(graph)
