from xml.etree.ElementTree import ElementTree
import pydot
import re
import copy
import collections
from networkx import nx

# Global Counter to Allow for Distinct Copies of Basic Blocks
global_counter = 0

class BasicBlock(object):
    def __init__(self, method_name, BB=None):
        global global_counter

        self.method_name = method_name

        if BB:
            self.instructions = BB.instructions
        else:
            self.instructions = tuple()

        global_counter += 1
        self.id = global_counter

    def __hash__(self):
        return hash(hash(self.instructions) + hash(self.id))

    def __repr__(self):
        return '<%d>%s(ID=%d)' % (self.instructions[0].index(), str(self.instructions[-1]), self.id)

    def add_instruction(self, insn):
        self.instructions += (insn,)

    def entry_point_index(self):
        #Get the index of the 1st instruction of the BasicBlock
        return self.instructions[0].index()

    def tail_instruction(self):
        return self.instructions[-1]

    def __deepcopy__(self, memo):
        return BasicBlock(self.method_name, BB=self)

    def is_source(self):
        return len([i for i in self.instructions if i.is_source()]) > 0

    def is_sink(self):
        return len([i for i in self.instructions if i.is_sink()]) > 0

    def transfer(self, state):
        for i in self.instructions:
            i.transfer(state)

    def index(self):
        return self.instructions[0].index()

class Insn(object):
    def __init__(self, xml):
        self.xml = xml

    def __repr__(self):
        return self.opcode()

    def opcode(self):
        return self.xml.get('opCode')

    def index(self):
        return int(self.xml.get('index'), 16)

    def transfer(self, state):
        pass

    def target_index(self):
        return None

    def is_source(self):
        return False

    def is_sink(self):
        return False
        
    def follows_sequential_instruction(self):
        return True

    def ends_block(self):
        return False

    def has_target(self):
        return self.target_index() != None

    def is_invoke(self):
        return False

    def is_return(self):
        return False

class Branch(Insn):
    def ends_block(self):
        return True

class Return(Branch):
    def is_return(self):
        return True

    def follows_sequential_instruction(self):
        return False

    def return_value_register(self):
        return self.xml.get('vA')

    def transfer(self, state):
        state.set_result(state[self.return_value_register()])
        state.pop()

class ReturnVoid(Return):
    def transfer(self, state):
        state.pop()

class Dummy_Return(Return):
    def opcode(self):
        return "Dummy Return"

    def index(self):
        return -1

class If(Branch):
    def target_index(self):
        return int(self.xml.get('vC'), 16)

class IfZero(If):
    def target_index(self):
        return int(self.xml.get('vB'), 16)

class Goto(Branch):
    def target_index(self):
        return int(self.xml.get('vA'), 16)

    def follows_sequential_instruction(self):
        return False

class Move(Insn):
    def dest(self):
        return self.xml.get('vA')

    def src(self):
        return self.xml.get('vB')

    def transfer(self, state):
        state[self.dest()] = state[self.src()]

    def __repr__(self):
        return '%s %s, %s' % (self.opcode(), self.dest(), self.src()) 

class MoveResult(Move):
    def transfer(self, state):
        state[self.dest()] = state.last_invoke_result

    def __repr__(self):
        return '%s %s' % (self.opcode(), self.dest())

class NewInstance(Insn):
    def get_instance(self):
        return self.xml.get('vB')

    def dest(self):
        return self.xml.get('vA')

    def __repr__(self):
        return '%s %s %s' % (self.opcode(), self.dest(), self.get_instance())

    def transfer(self, state):
        if self.get_instance() == 'Landroid/content/Intent;':
            state[self.dest()] = Intent()
        else:
            state[self.dest()] = 'Instance of ' + self.get_instance()

class Const(Move):
    def get_const(self):
        return int(self.src(), 16)

    def transfer(self, state):
        state[self.dest()] = self.get_const()

class ConstString(Move):
    def transfer(self, state):
        state[self.dest()] = str(self.src())

class Invoke(Branch):
    def __init__(self, xml):
        self.xml = xml
        self.invoke = True

    def __repr__(self):
        return self.signature()

    def is_source(self):
        cname, mname, params = self.parse_invoked_method()
        INTENT_CLASS = 'Landroid/content/Intent;'
        return cname == INTENT_CLASS and mname == '<init>'

    def is_sink(self):
        return self.parse_invoked_method()[1] in ['sendBroadcast',
                'sendOrderedBroadcast', 'sendStickyBroadcast', 'startActivity',
                'startActivityForResult', 'startService', 'bindService']

    def parse_invoked_method(self):
        signature = self.xml.get('vC')
        rex = re.match(r'(.*)\.(.*)\(((.*))\)', signature)
        cname = rex.group(1)
        mname = rex.group(2)
        params = rex.group(3)
        return cname, mname, params

    def signature(self):
        return "%s.%s(%s)" % self.parse_invoked_method()

    def is_invoke(self):
        return self.invoke

    def uninvoke(self):
        self.invoke = False

    def argc(self):
        return int(self.xml.get('vB'))

    def transfer(self, state):
        argv = [state[self.xml.get(a)] for a in ['vD', 'vE', 'vF', 'vG', 'vA'][:self.argc()]]
        if self.signature() not in MethodMap:
            MethodStubs[self.signature()](state, argv)
        else:
            method_el = MethodMap[self.signature()]
            mapping = mapping_with_arguments(method_el, argv)
            state.push(mapping)

class Intent(object):
    def __init__(self):
        self.action = ''
        self.categories = []
        self.extras = {}
        self.classname = ''

    def set_classname(self, classname):
        self.classname = classname

    def set_action(self, action):
        self.action = action

    def add_category(self, category):
        self.categories.append(category)

    def put_extra(self, key, val):
        self.extras[key] = val

    def __repr__(self):
        s = 'Intent(action=%s,categories=%s,extras=%s,classname=%s)'
        return s % (self.action, self.categories, self.extras, self.classname)

### Method stubs - aka library methods and the like ###
MethodStubs = collections.defaultdict(lambda: default_stub)

def stubbify(signature):
    """Takes in a signature, and maps the signature to the stub"""
    def wrapped(stub):
        MethodStubs[signature] = stub
        return stub
    return wrapped

@stubbify('Landroid/content/Intent;.<init>(Ljava/lang/String;)')
def intent_init_string(state, args):
    intent, action = args
    intent.set_action(action)

@stubbify('Landroid/content/Intent;.addCategory(Ljava/lang/String;)')
def intent_add_category_string(state, args):
    intent, category = args
    intent.add_category(category)

@stubbify('Landroid/content/Intent;.putExtra(Ljava/lang/String;Ljava/lang/String;)')
def intent_put_extra_string_string(state, args):
    intent, key, val = args
    intent.put_extra(key, val)

@stubbify('Landroid/content/Intent;.setClassName(Ljava/lang/String;Ljava/lang/String;)')
def intent_set_classname_context_string(state, args):
    intent, ctx, classname = args # where does ctx go? do we care?
    intent.set_classname(classname)

# The default stub
GlobalUnknownId = 0
def default_stub(state, args):
    global GlobalUnknownId
    state.set_result('%d?' % GlobalUnknownId)
    GlobalUnknownId += 1
#######################################################

def initial_state(entryMethod_xml):
    """Return the initial mapping of entryMethod_xml"""
    state = State()
    parameter_els = entryMethod_xml.findall('parameter')
    arguments = ['THIS']
    arguments += [p.get('name') for p in parameter_els]
    state.push(mapping_with_arguments(entryMethod_xml, arguments))
    return state

def mapping_with_arguments(method_xml, arguments):
    """A register mapping where the each argument is mapped to the appropriate
    parameter-register when the method is in its initial state."""
    mapping = {}
    num_params = len(method_xml.findall('parameter'))
    num_registers = int(method_xml.find('code').get('registers'))
    start_index = (num_registers-1) - num_params
    registers = [('v%d' % i) for i in range(start_index, num_registers)]
    for i, register in enumerate(registers):
        mapping[register] = arguments[i]
    return mapping

InstructionSet = {
    'if-eq': If,
    'if-ne': If,
    'if-lt': If,
    'if-ge': If,
    'if-gt': If,
    'if-le': If,
    'if-eqz': IfZero,
    'if-nez': IfZero,
    'if-ltz': IfZero,
    'if-gez': IfZero,
    'if-gtz': IfZero,
    'if-lez': IfZero,
    'goto': Goto,
    'goto/16': Goto,
    'invoke-virtual': Invoke,
    'invoke-super': Invoke,
    'invoke-direct': Invoke,
    'invoke-static': Invoke,
    'invoke-interface': Invoke,
    'const/4': Const,
    'const/16': Const,
    'const': Const,
    'const-string': ConstString,
    'const-class': ConstString,
    'const-string/jumbo': ConstString,
    'const-class/jumbo': ConstString,
    'const/high16': Const,
    'const-wide/16': Const,
    'const-wide/32': Const,
    'const-wide': Const,
    'const-wide/high16': Const,
    'return': Return,
    'return-void': ReturnVoid,
    'return-wide': Return,
    'return-object': Return,
    'move-result-object': MoveResult,
    'move-result': MoveResult,
    'move-result-wide': MoveResult,
    'move': Move,
    'new-instance': NewInstance
}

class State(object):
    """Models a stack of register mappings. Mappings are pushed and popped off
    the stack via function invocations and returns."""
    def __init__(self):
        self.mappings = []
        self.last_invoke_result = None

    def __getitem__(self, key):
        """Return value mapped by register @key of current mapping."""
        return self.mappings[-1][key]

    def __setitem__(self, key, value):
        """Map register @key to @value in current mapping."""
        self.mappings[-1][key] = value

    def __repr__(self):
        return '|||'.join(map(str, self.mappings))

    def set_result(self, value):
        self.last_invoke_result = value

    def push(self, state):
        """Save current register mapping to stack and set current mapping to
        empty."""
        self.mappings.append(state)

    def pop(self):
        """Set current register mapping to last mapping."""
        return self.mappings.pop()

def insn_from_xml(insn_el):
    opcode = insn_el.get('opCode')
    insn = InstructionSet.setdefault(opcode, Insn)(insn_el)
    return insn

def insns_from_xml(method_el):
    bytecodes_el = method_el.find('code').find('bytecodes')
    if bytecodes_el is None:
        return []
    insn_els = bytecodes_el.findall('insn')
    insns = []
    for insn_el in insn_els:
        opcode = insn_el.get('opCode')
        insn = insn_from_xml(insn_el)
        insns.append(insn)
    return insns

def leaders(insns):
    indices = set([insns[0].index()])
    for i, insn in enumerate(insns):
        if insn.ends_block():
            indices.add(insn.target_index())
            if (i+1) in range(len(insns)):
                indices.add(insns[i+1].index())
    return indices

def basic_blocks(insns, method_name):
    ldrs = leaders(insns)
    bbs = []
    bb = BasicBlock(method_name)
    for insn in insns:
        if insn.index() in ldrs and bb.instructions:
            bbs.append(bb)
            bb = BasicBlock(method_name)
        bb.add_instruction(insn)
    if bb: bbs.append(bb)
    return bbs

def graph_from_xml(method_el, method_name):
    insns = insns_from_xml(method_el)
    bbs = basic_blocks(insns, method_name)
    graph = nx.DiGraph()
    bb_entry_points = {}
    for bb in bbs:
        bb_entry_points[bb.entry_point_index()] = bb
    for i, bb in enumerate(bbs):
        tail = bb.tail_instruction()
        if tail.follows_sequential_instruction():
            if (i+1) in range(len(bbs)):
                graph.add_edge(bb, bbs[i+1])
        if tail.has_target():
            dest = bb_entry_points[tail.target_index()]
            graph.add_edge(bb, dest)
    return graph

def visualize(graph):
    dot_graph = nx.to_pydot(graph)
    dot_graph.write_png('example.png')

def method_signature_from_xml(class_el, method_el):
    class_name = class_el.get('name')
    method_name = method_el.get('name')
    parameters = []
    parameter_els = method_el.findall('parameter')
    for param_el in parameter_els:
        parameters.append(param_el.get('type'))
    return "%s.%s(%s)" % (class_name, method_name, "".join(parameters))

def copy_graph(G):
    new_graph = nx.DiGraph()
    node_mapping = {}

    for node in G.nodes():
        new_node = copy.deepcopy(node)
        node_mapping[node] = new_node
        new_graph.add_node(new_node)

    new_edges = []

    for (n1, n2) in G.edges():
        new_edges.append((node_mapping[n1], node_mapping[n2]))

    new_graph.add_edges_from(new_edges)

    return new_graph

def find_all_paths(graph, start, end, path=[]):
        path = path + [start]
        if start == end:
            return [path]
#        if not graph.has_key(start):
#            return []
        paths = []
        for node in graph.neighbors(start):
            if node not in path:
                newpaths = find_all_paths(graph, node, end, path)
                for newpath in newpaths:
                    paths.append(newpath)
        return paths

def expand_method(method):
    for caller_bb in method.nodes():
        insn = caller_bb.tail_instruction()
        if insn.is_invoke():
            # Make sure this node is not expanded again
            insn.uninvoke()

            if insn.signature() not in graphs:
                pass
                # Means it's calling a super class
                # Or Landroid, Ljava, etc...
            else:
                # If the caller_bb is invoke, the return block is the one it is linked to
#===============================================================
                #HACK. Calls are not guaranteed to be follwed by another bb?
                #Create a fake return_bb
                if method.successors(caller_bb):
                    return_bb = method.successors(caller_bb)[0]
                    # Destroy the Edge between the caller_bb and the return_bb
                    method.remove_edge(caller_bb, return_bb)
                else:
                    return_bb = BasicBlock(caller_bb.method_name)
                    return_bb.add_instruction(Dummy_Return(None))
                    method.add_node(return_bb)

                # Create a copy of the graph of the function we are calling
                method_graph = copy_graph(graphs[insn.signature()])
                method = nx.union(method, method_graph)

                #Link caller to entry point of method graph
                for callee_bb in method_graph.nodes():
                    if method_graph.in_degree(callee_bb) == 0:
                        method.add_edge(caller_bb, callee_bb)
                        break

                #Link return blocks to the return_bb in the caller
                for callee_bb in method_graph.nodes():
                    # If a basic block ends with a return, link it back to the
                    # return_bb in the caller graph
                    if callee_bb.tail_instruction().is_return():
                        method.add_edge(callee_bb, return_bb)
    return method

graphs = {}
MethodMap = {}
activity_entry_points = []
tree = ElementTree()
tree.parse('examples/TouchRecorder/dump.xml')
for class_el in tree.findall('class'):
    for method_el in class_el.findall('method'):
        code_el = method_el.find('code')
        if code_el is None or code_el.find('bytecodes') is None:
            continue
        graph = graph_from_xml(method_el, method_el.get('name'))
        signature = method_signature_from_xml(class_el, method_el)
        graphs[signature] = graph
        MethodMap[signature] = method_el

        # Find All Activity Entry Points
        entry_points = ["onResume", "onCreate", "onStart", "onRestart",
                "onPause", "onStop", "onDestroy", "launchImageSwiper"]
        if method_el.get('name') in entry_points:
            print "Entry Point:", class_el.get('name')
            activity_entry_points.append((class_el.get('name'), graph, method_el))

for class_name, entryPoint_method, entryPoint_xml in activity_entry_points:
    if entryPoint_xml.get('name') != 'launchImageSwiper':
        continue

    #List of all paths between source nodes and sink nodes
    # N.B. do this before expansion!

    entry_nodes = []
    entry_paths = []
    exit_paths = []
    combined_paths = []

    for node in entryPoint_method.nodes():
        if node.index() == 0:
            entry_nodes.append(node)

    original_count = entryPoint_method.number_of_nodes()
    for i in xrange(0,10):
        entryPoint_method = expand_method(entryPoint_method)
        new_count = entryPoint_method.number_of_nodes()
        if original_count == new_count:
            print "Finished after %i iterations" % i
            break
        original_count = new_count

    source_nodes = [node for node in entryPoint_method.nodes() if node.is_source()]
    sink_nodes = [node for node in entryPoint_method.nodes() if node.is_sink()]

    for entry in entry_nodes:
        for source in source_nodes:
            entry_paths += find_all_paths(entryPoint_method, entry, source)

    for source in source_nodes:
        for sink in sink_nodes:
            exit_paths += find_all_paths(entryPoint_method, source, sink)

    for entry_path in entry_paths:
        for exit_path in exit_paths:
            if entry_path[-1] is exit_path[0]:
                combined_paths.append(entry_path + exit_path)

    for path in combined_paths:
        state = initial_state(entryPoint_xml)
        print state
        for node in path:
            for i in node.instructions:
                i.transfer(state)
                print i, state

    #Temporary - To See what a combination will look like
    print "Visualizing:", class_name
    visualize(entryPoint_method)
